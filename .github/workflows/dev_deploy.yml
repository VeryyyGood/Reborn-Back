name: Reborn dev CI/CD

on:
  pull_request:
    types:
    - closed
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4.0.0
        with:
          java-version: '17'
          distribution: 'adopt'

      # 리눅스
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean build -x test
        shell: bash #build 시작

      - name: Get current time
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: 'YYYY-MM-DDTHH:mm:ss'
          utcOffset: '+09:00' #build 시점의 시간 확보

      - name: Show current time
        run: echo "${{ steps.current-time.outputs.formattedTime }}"
        shell: bash

      - name: Generate deployment package #빌드 ing
        run: |
          mkdir -p deploy
          cp build/libs/*.jar deploy/application.jar
          cp Procfile deploy/Procfile
          cp -r .ebextensions_dev deploy/.ebextensions
          cp -r .platform deploy/.platform
          cd deploy && zip -r deploy.zip .

      #beanstalk에게 배포 요청
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACTION_ACCESS_KEY_ID }} #github에 등록 완료
          aws_secret_key: ${{ secrets.AWS_ACTION_SECRET_ACCESS_KEY }}
          application_name: 'Reborn-dev'
          environment_name: 'Reborn-dev-env'
          version_label: github-action-${{ steps.current-time.outputs.formattedTime }}
          region: 'ap-northeast-2'
          deployment_package: 'deploy/deploy.zip'
          wait_for_deployment: false


#추가적 환경변수 -> github action에 등록 완료

#  aws.db.password: ${{ secrets.AWS_DB_PASSWORD }}
#  aws.db.url: ${{ secrets.AWS_DB_URL }}
#  aws.db.username: ${{ secrets.AWS_DB_USERNAME }}
#
#  local.db.password: ${{ secrets.LOCAL_DB_PASSWORD }}
#  local.db.url: ${{ secrets.LOCAL_DB_URL }}
#  local.db.username: ${{ secrets.LOCAL_DB_USERNAME }}
#
#  jwt.accessExpirationTime : ${{ secrets.JWT_EXPIRATION }}
#  jwt.refreshExpirationTime : ${{ secrets.JWT_REFRESH_EXPIRATION }}
#  jwt.secret: ${{ secrets.JWT_SECRET }}

  #${{ secrets.CLIENT_ID }}
  #${{ secrets.CLIENT_SECRET }}