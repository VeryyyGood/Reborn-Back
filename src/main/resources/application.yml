# default profile settings
spring:
  profiles:
    active: local

  # naver login
  security:
    oauth2:
      client:

        # 1. 서비스 제공자에 대한 정보
        provider:
          # 서비스 제공자 식별자
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize # 사용자를 redirect 하기 위한 URL
            token-uri: https://nid.naver.com/oauth2.0/token # 사용자 정보 요청을 위한 ACCESS TOKEN을 받기 위한 URL
            user-info-uri: https://openapi.naver.com/v1/nid/me # 사용자 정보를 조회(회수)하기 위한 URL 작성
            user-name-attribute: response # 서비스 제공자로부터 받은 사용자 정보 중 어떤 부분을 활용하는지.

        # 2. 서비스 제공자를 사용하기 위한 정보
        # 클라이언트(즉 우리 서버)를 식별하기 위한 정보
        registration:
          # 서비스 제공자 식별자
          naver:
            # 서비스 제공자측에 저희가 어떤 서비스인지 인증하기 위한 값
            client-id: CEw77iu5PPKjTncjABxo #서비스 제공자측에 저희가 어떤 서비스인지 인증하기 위한 값
            client-secret: zkzpaH1_n7
            #redirect-uri: http://localhost:8080/login/oauth2/code/naver
            redirect-uri: http://reborn.persi0815.site:8080/login/oauth2/code/naver
            authorization-grant-type: authorization_code # 어떤 방식으로 access token을 받을지 정의
            client-authentication-method: client_secret_post # Client Id, Client Secret를 요청의 어디에 포함할지 정의. Body
            client-name: Naver
            scope:
              - nickname
              - email

  servlet:
    multipart:
      maxFileSize: 10MB # 파일 하나의 최대 크기
      maxRequestSize: 30MB  # 한 번에 최대 업로드 가능 용량

# S3
cloud:
  aws:
    s3:
      bucket: reborn-image
      path:
        location: location
    region:
      static: ap-northeast-2
    stack:
      auto: false
    credentials:
      accessKey: ${AWS_S3_ACCESS_KEY}
      secretKey: ${AWS_S3_SECRET_KEY}

# 리프레시 토큰
#  data:
#    redis:
#      host: ${REDIS_HOST}
#      port: ${REDIS_PORT}

# 로그인 JWT 토큰
jwt:
  secret: ${JWT_SECRET}
  accessExpirationTime: ${JWT_EXPIRATION}
  refreshExpirationTime: ${JWT_REFRESH_EXPIRATION}

# Swagger
springdoc:
  swagger-ui:
    path: /swagger
  cache:
    disabled: true
  use-fqn: true

---

# local profile
spring:
  config:
    activate:
      on-profile: local
  datasource:
    url: ${local.db.url}
    username: ${local.db.username}
    password: ${local.db.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  sql:
    init:
      mode: never
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
#        format_sql: true
#        show_sql: true
        use_sql_comments: true
        hbm2ddl:
          auto: update
        default_batch_fetch_size: 1000
#  data:
#    redis:
#      host: localhost
#      port: 6379


---

# develop profile
spring:
  config:
    activate:
      on-profile: develop
  datasource:
    url: ${aws.db.url}
    username: ${aws.db.username}
    password: ${aws.db.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  sql:
    init:
      mode: never
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        #        format_sql: true
        #        show_sql: true
        use_sql_comments: true
        hbm2ddl:
          auto: update
        default_batch_fetch_size: 1000
#  data:
#    redis:
#      host: a-redis-cluster.bjyb5r.ng.0001.cache.amazonaws.con


---

# release profile
spring:
  config:
    activate:
      on-profile: release
  datasource:
    url: ${aws.db.url}
    username: ${aws.db.username}
    password: ${aws.db.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  sql:
    init:
      mode: never
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        #        format_sql: true
        #        show_sql: true
        use_sql_comments: true
        hbm2ddl:
          auto: create
        default_batch_fetch_size: 1000